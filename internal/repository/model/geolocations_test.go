// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGeolocations(t *testing.T) {
	t.Parallel()

	query := Geolocations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGeolocationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeolocationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Geolocations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeolocationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GeolocationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeolocationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GeolocationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Geolocation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GeolocationExists to return true, but got false.")
	}
}

func testGeolocationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	geolocationFound, err := FindGeolocation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if geolocationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGeolocationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Geolocations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGeolocationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Geolocations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGeolocationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geolocationOne := &Geolocation{}
	geolocationTwo := &Geolocation{}
	if err = randomize.Struct(seed, geolocationOne, geolocationDBTypes, false, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}
	if err = randomize.Struct(seed, geolocationTwo, geolocationDBTypes, false, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = geolocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = geolocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Geolocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGeolocationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	geolocationOne := &Geolocation{}
	geolocationTwo := &Geolocation{}
	if err = randomize.Struct(seed, geolocationOne, geolocationDBTypes, false, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}
	if err = randomize.Struct(seed, geolocationTwo, geolocationDBTypes, false, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = geolocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = geolocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func geolocationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func geolocationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Geolocation) error {
	*o = Geolocation{}
	return nil
}

func testGeolocationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Geolocation{}
	o := &Geolocation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, geolocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Geolocation object: %s", err)
	}

	AddGeolocationHook(boil.BeforeInsertHook, geolocationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	geolocationBeforeInsertHooks = []GeolocationHook{}

	AddGeolocationHook(boil.AfterInsertHook, geolocationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	geolocationAfterInsertHooks = []GeolocationHook{}

	AddGeolocationHook(boil.AfterSelectHook, geolocationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	geolocationAfterSelectHooks = []GeolocationHook{}

	AddGeolocationHook(boil.BeforeUpdateHook, geolocationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	geolocationBeforeUpdateHooks = []GeolocationHook{}

	AddGeolocationHook(boil.AfterUpdateHook, geolocationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	geolocationAfterUpdateHooks = []GeolocationHook{}

	AddGeolocationHook(boil.BeforeDeleteHook, geolocationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	geolocationBeforeDeleteHooks = []GeolocationHook{}

	AddGeolocationHook(boil.AfterDeleteHook, geolocationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	geolocationAfterDeleteHooks = []GeolocationHook{}

	AddGeolocationHook(boil.BeforeUpsertHook, geolocationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	geolocationBeforeUpsertHooks = []GeolocationHook{}

	AddGeolocationHook(boil.AfterUpsertHook, geolocationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	geolocationAfterUpsertHooks = []GeolocationHook{}
}

func testGeolocationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeolocationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(geolocationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeolocationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGeolocationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GeolocationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGeolocationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Geolocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	geolocationDBTypes = map[string]string{`ID`: `integer`, `IPAddress`: `inet`, `CountryCode`: `character varying`, `Country`: `character varying`, `City`: `character varying`, `Coordinates`: `point`, `MysteryValue`: `character varying`, `CreatedAt`: `timestamp with time zone`}
	_                  = bytes.MinRead
)

func testGeolocationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(geolocationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(geolocationAllColumns) == len(geolocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGeolocationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(geolocationAllColumns) == len(geolocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Geolocation{}
	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, geolocationDBTypes, true, geolocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(geolocationAllColumns, geolocationPrimaryKeyColumns) {
		fields = geolocationAllColumns
	} else {
		fields = strmangle.SetComplement(
			geolocationAllColumns,
			geolocationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GeolocationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGeolocationsUpsert(t *testing.T) {
	t.Parallel()

	if len(geolocationAllColumns) == len(geolocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Geolocation{}
	if err = randomize.Struct(seed, &o, geolocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Geolocation: %s", err)
	}

	count, err := Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, geolocationDBTypes, false, geolocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Geolocation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Geolocation: %s", err)
	}

	count, err = Geolocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
